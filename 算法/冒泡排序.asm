; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\custom\test\练习和实验\算法\冒泡排序.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_bubble_sort
PUBLIC	_bubble_sort2
EXTRN	_swap:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\custom\test\练习和实验\算法\冒泡排序.c
;	COMDAT _bubble_sort2
_TEXT	SEGMENT
_flag$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_a$ = 8							; size = 4
_n$ = 12						; size = 4
_bubble_sort2 PROC					; COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 51   : 	int i, j;
; 52   : 	int flag;                 // 进行交换的标记，1表示进行了交换，0表示没有
; 53   : 
; 54   : 	for (i=0; i<n-1; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@bubble_sor
$LN2@bubble_sor:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@bubble_sor:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@bubble_sor

; 55   : 	{
; 56   : 		flag = 0;

	mov	DWORD PTR _flag$[ebp], 0

; 57   : 		for (j=0; j<n-1; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@bubble_sor
$LN5@bubble_sor:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@bubble_sor:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN6@bubble_sor

; 58   : 		{
; 59   : 			if (a[j] > a[j+1])

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4+4]
	jle	SHORT $LN8@bubble_sor

; 60   : 			{
; 61   : 				swap(&a[j], &a[j + 1]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_swap
	add	esp, 8

; 62   : 				flag = 1;

	mov	DWORD PTR _flag$[ebp], 1
$LN8@bubble_sor:

; 63   : 			}
; 64   : 		}

	jmp	SHORT $LN5@bubble_sor
$LN6@bubble_sor:

; 65   : 		if (flag == 0)	//如果等于0，则说明已经是有序数列了。

	cmp	DWORD PTR _flag$[ebp], 0
	jne	SHORT $LN9@bubble_sor

; 66   : 			break;	//注意这里是要跳出外面的循环，里面的循环不能跳过。因为至少要进行一次比较。

	jmp	SHORT $LN1@bubble_sor
$LN9@bubble_sor:

; 67   : 	}

	jmp	SHORT $LN2@bubble_sor
$LN1@bubble_sor:

; 68   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bubble_sort2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\custom\test\练习和实验\算法\冒泡排序.c
;	COMDAT _bubble_sort
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_array$ = 8						; size = 4
_length$ = 12						; size = 4
_bubble_sort PROC					; COMDAT

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10   : 	int i, j;
; 11   : 	for (i = 0; i < length -1; ++i)//如果i是从0开始，则每次进行完之后都要递增，如果是从length-1开始，则以后都要递减。

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@bubble_sor
$LN2@bubble_sor:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@bubble_sor:
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@bubble_sor

; 12   : 	{
; 13   : 		for (j = 0; j < length -i-1; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@bubble_sor
$LN5@bubble_sor:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@bubble_sor:
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN6@bubble_sor

; 14   : 		{
; 15   : 			if (array[j] > array[j+1])//实现交换，也就是冒泡,如果是升序，则这里是大于号

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4+4]
	jle	SHORT $LN8@bubble_sor

; 16   : 			{
; 17   : 				swap(&array[j], &array[j+1]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_swap
	add	esp, 8
$LN8@bubble_sor:

; 18   : 			}
; 19   : 		}

	jmp	SHORT $LN5@bubble_sor
$LN6@bubble_sor:

; 20   : 	}

	jmp	SHORT $LN2@bubble_sor
$LN1@bubble_sor:

; 21   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bubble_sort ENDP
_TEXT	ENDS
END
