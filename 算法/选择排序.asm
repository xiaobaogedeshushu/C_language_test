; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\custom\test\练习和实验\算法\选择排序.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_select_sort
PUBLIC	_select_sort_20190622
EXTRN	_swap:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\custom\test\练习和实验\算法\选择排序.c
;	COMDAT _select_sort_20190622
_TEXT	SEGMENT
_min$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_array$ = 8						; size = 4
_count$ = 12						; size = 4
_select_sort_20190622 PROC				; COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   : 	int i, j, min;
; 38   : 
; 39   : 	for (i = 0; i < count-1; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@select_sor
$LN2@select_sor:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@select_sor:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@select_sor

; 40   : 	{
; 41   : 		min = i;//以首元素为基准

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _min$[ebp], eax

; 42   : 		for (j = i+1; j < count-1 ; j++)

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN7@select_sor
$LN5@select_sor:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@select_sor:
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN6@select_sor

; 43   : 		{
; 44   : 			if (array[min] < array[j])

	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	jge	SHORT $LN8@select_sor

; 45   : 			{
; 46   : 				min = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _min$[ebp], eax
$LN8@select_sor:

; 47   : 			}		
; 48   : 		}

	jmp	SHORT $LN5@select_sor
$LN6@select_sor:

; 49   : 		if(i != min)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _min$[ebp]
	je	SHORT $LN9@select_sor

; 50   : 		{
; 51   : 			swap(&array[min], &array[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_swap
	add	esp, 8
$LN9@select_sor:

; 52   : 		}
; 53   : 	}	

	jmp	SHORT $LN2@select_sor
$LN1@select_sor:

; 54   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_select_sort_20190622 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\custom\test\练习和实验\算法\选择排序.c
;	COMDAT _select_sort
_TEXT	SEGMENT
_min$ = -32						; size = 4
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_array$ = 8						; size = 4
_length$ = 12						; size = 4
_select_sort PROC					; COMDAT

; 9    : void select_sort(int array[], int length) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10   : 	int i, j, min;
; 11   : 
; 12   : 	for (i = 0; i<length-1; i++) 

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@select_sor
$LN2@select_sor:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@select_sor:
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@select_sor

; 13   : 	{
; 14   : 		min = i;//以首元素为第一个基准

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _min$[ebp], eax

; 15   : 
; 16   : 		for (j = i + 1; j<length-1; j++) 

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN7@select_sor
$LN5@select_sor:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@select_sor:
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN6@select_sor

; 17   : 		{
; 18   : 			if (array[min] > array[j])

	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _array$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	jle	SHORT $LN8@select_sor

; 19   : 			{
; 20   : 				//若有小于基准的值，则更换基准
; 21   : 				min = j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _min$[ebp], eax
$LN8@select_sor:

; 22   : 			}
; 23   : 		}

	jmp	SHORT $LN5@select_sor
$LN6@select_sor:

; 24   : 		if (i != min) 

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _min$[ebp]
	je	SHORT $LN9@select_sor

; 25   : 		{
; 26   : 			//若min与i不相等，则说明找到这趟排序的最小值，交换。如果相等，则这趟排序第一个数就是最小值，所以不用动。
; 27   : 			swap(&array[min], &array[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _min$[ebp]
	mov	ecx, DWORD PTR _array$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_swap
	add	esp, 8
$LN9@select_sor:

; 28   : 		}
; 29   : 	}

	jmp	SHORT $LN2@select_sor
$LN1@select_sor:

; 30   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_select_sort ENDP
_TEXT	ENDS
END
