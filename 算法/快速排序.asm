; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\custom\test\练习和实验\算法\快速排序.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_partition
PUBLIC	_quick_sort
EXTRN	_swap:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\custom\test\练习和实验\算法\快速排序.c
;	COMDAT _quick_sort
_TEXT	SEGMENT
_base$1 = -8						; size = 4
_arr$ = 8						; size = 4
_low$ = 12						; size = 4
_high$ = 16						; size = 4
_quick_sort PROC					; COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 29   : 	if (low < high)

	mov	eax, DWORD PTR _low$[ebp]
	cmp	eax, DWORD PTR _high$[ebp]
	jge	SHORT $LN1@quick_sort

; 30   : 	{
; 31   : 		int base = partition(arr, low, high);

	mov	eax, DWORD PTR _high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _low$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arr$[ebp]
	push	edx
	call	_partition
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _base$1[ebp], eax

; 32   : 		quick_sort(arr, low, base - 1);

	mov	eax, DWORD PTR _base$1[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _low$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arr$[ebp]
	push	edx
	call	_quick_sort
	add	esp, 12					; 0000000cH

; 33   : 		quick_sort(arr, base + 1, high);

	mov	eax, DWORD PTR _high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$1[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _arr$[ebp]
	push	edx
	call	_quick_sort
	add	esp, 12					; 0000000cH
$LN1@quick_sort:

; 34   : 	}
; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_quick_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\custom\test\练习和实验\算法\快速排序.c
;	COMDAT _partition
_TEXT	SEGMENT
_base$ = -8						; size = 4
_arr$ = 8						; size = 4
_low$ = 12						; size = 4
_high$ = 16						; size = 4
_partition PROC						; COMDAT

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 10   : 	int base = arr[low];

	mov	eax, DWORD PTR _low$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _base$[ebp], edx
$LN2@partition:

; 11   : 	while (low < high)

	mov	eax, DWORD PTR _low$[ebp]
	cmp	eax, DWORD PTR _high$[ebp]
	jge	SHORT $LN3@partition
$LN4@partition:

; 12   : 	{
; 13   : 		while (low < high && arr[high] >= base)// 从右向左找小于base的数

	mov	eax, DWORD PTR _low$[ebp]
	cmp	eax, DWORD PTR _high$[ebp]
	jge	SHORT $LN5@partition
	mov	eax, DWORD PTR _high$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _base$[ebp]
	jl	SHORT $LN5@partition

; 14   : 		{
; 15   : 			high--;

	mov	eax, DWORD PTR _high$[ebp]
	sub	eax, 1
	mov	DWORD PTR _high$[ebp], eax

; 16   : 		}

	jmp	SHORT $LN4@partition
$LN5@partition:

; 17   : 		swap(&arr[low], &arr[high]);

	mov	eax, DWORD PTR _high$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _low$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_swap
	add	esp, 8
$LN6@partition:

; 18   : 		while (low < high && arr[low] <= base)// 从左向右找大于base的数

	mov	eax, DWORD PTR _low$[ebp]
	cmp	eax, DWORD PTR _high$[ebp]
	jge	SHORT $LN7@partition
	mov	eax, DWORD PTR _low$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _base$[ebp]
	jg	SHORT $LN7@partition

; 19   : 		{
; 20   : 			low++;

	mov	eax, DWORD PTR _low$[ebp]
	add	eax, 1
	mov	DWORD PTR _low$[ebp], eax

; 21   : 		}

	jmp	SHORT $LN6@partition
$LN7@partition:

; 22   : 		swap(&arr[low], &arr[high]);

	mov	eax, DWORD PTR _high$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _low$[ebp]
	mov	ecx, DWORD PTR _arr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_swap
	add	esp, 8

; 23   : 	}

	jmp	$LN2@partition
$LN3@partition:

; 24   : 	return low;

	mov	eax, DWORD PTR _low$[ebp]

; 25   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_partition ENDP
_TEXT	ENDS
END
